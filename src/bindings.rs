/* automatically generated by rust-bindgen 0.65.1 */

pub const __WORDSIZE: u32 = 64;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const IR_VERSION_MAJOR: u32 = 0;
pub const IR_VERSION_MINOR: u32 = 1;
pub const IR_VERSION_PATCH: u32 = 0;
pub const IRDescriptorRangeOffsetAppend: u32 = 4294967295;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRError {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRRootSignature {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRCompiler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRMetalLibBinary {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRShaderReflection {
    _unused: [u8; 0],
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRComparisonFunction {
    IRComparisonFunctionNever = 1,
    IRComparisonFunctionLess = 2,
    IRComparisonFunctionEqual = 3,
    IRComparisonFunctionLessEqual = 4,
    IRComparisonFunctionGreater = 5,
    IRComparisonFunctionNotEqual = 6,
    IRComparisonFunctionGreaterEqual = 7,
    IRComparisonFunctionAlways = 8,
}
impl IRDescriptorRangeFlags {
    pub const IRDescriptorRangeFlagNone: IRDescriptorRangeFlags = IRDescriptorRangeFlags(0);
}
impl IRDescriptorRangeFlags {
    pub const IRDescriptorRangeFlagDescriptorsVolatile: IRDescriptorRangeFlags =
        IRDescriptorRangeFlags(1);
}
impl IRDescriptorRangeFlags {
    pub const IRDescriptorRangeFlagDataVolatile: IRDescriptorRangeFlags = IRDescriptorRangeFlags(2);
}
impl IRDescriptorRangeFlags {
    pub const IRDescriptorRangeFlagDataStaticWhileSetAtExecute: IRDescriptorRangeFlags =
        IRDescriptorRangeFlags(4);
}
impl IRDescriptorRangeFlags {
    pub const IRDescriptorRangeFlagDataStatic: IRDescriptorRangeFlags = IRDescriptorRangeFlags(8);
}
impl IRDescriptorRangeFlags {
    pub const IRDescriptorRangeFlagDescriptorsStaticKeepingBufferBoundsChecks:
        IRDescriptorRangeFlags = IRDescriptorRangeFlags(65536);
}
impl ::std::ops::BitOr<IRDescriptorRangeFlags> for IRDescriptorRangeFlags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        IRDescriptorRangeFlags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for IRDescriptorRangeFlags {
    #[inline]
    fn bitor_assign(&mut self, rhs: IRDescriptorRangeFlags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<IRDescriptorRangeFlags> for IRDescriptorRangeFlags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        IRDescriptorRangeFlags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for IRDescriptorRangeFlags {
    #[inline]
    fn bitand_assign(&mut self, rhs: IRDescriptorRangeFlags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct IRDescriptorRangeFlags(pub ::std::os::raw::c_uint);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRFilter {
    IRFilterMinMagMipPoint = 0,
    IRFilterMinMagPointMipLinear = 1,
    IRFilterMinPointMagLinearMipPoint = 4,
    IRFilterMinPointMagMipLinear = 5,
    IRFilterMinLinearMagMipPoint = 16,
    IRFilterMinLinearMagPointMipLinear = 17,
    IRFilterMinMagLinearMipPoint = 20,
    IRFilterMinMagMipLinear = 21,
    IRFilterAnisotropic = 85,
    IRFilterComparisonMinMagMipPoint = 128,
    IRFilterComparisonMinMagPointMipLinear = 129,
    IRFilterComparisonMinPointMagLinearMipPoint = 132,
    IRFilterComparisonMinPointMagMipLinear = 133,
    IRFilterComparisonMinLinearMagMipPoint = 144,
    IRFilterComparisonMinLinearMagPointMipLinear = 145,
    IRFilterComparisonMinMagLinearMipPoint = 148,
    IRFilterComparisonMinMagMipLinear = 149,
    IRFilterComparisonAnisotropic = 213,
    IRFilterMinimumMinMagMipPoint = 256,
    IRFilterMinimumMinMagPointMipLinear = 257,
    IRFilterMinimumMinPointMagLinearMipPoint = 260,
    IRFilterMinimumMinPointMagMipLinear = 261,
    IRFilterMinimumMinLinearMagMipPoint = 272,
    IRFilterMinimumMinLinearMagPointMipLinear = 273,
    IRFilterMinimumMinMagLinearMipPoint = 276,
    IRFilterMinimumMinMagMipLinear = 277,
    IRFilterMinimumAnisotropic = 341,
    IRFilterMaximumMinMagMipPoint = 384,
    IRFilterMaximumMinMagPointMipLinear = 385,
    IRFilterMaximumMinPointMagLinearMipPoint = 388,
    IRFilterMaximumMinPointMagMipLinear = 389,
    IRFilterMaximumMinLinearMagMipPoint = 400,
    IRFilterMaximumMinLinearMagPointMipLinear = 401,
    IRFilterMaximumMinMagLinearMipPoint = 404,
    IRFilterMaximumMinMagMipLinear = 405,
    IRFilterMaximumAnisotropic = 469,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRFormat {
    IRFormatUnknown = 0,
    IRFormatR32G32B32A32Typeless = 1,
    IRFormatR32G32B32A32Float = 2,
    IRFormatR32G32B32A32Uint = 3,
    IRFormatR32G32B32A32Sint = 4,
    IRFormatR32G32B32Typeless = 5,
    IRFormatR32G32B32Float = 6,
    IRFormatR32G32B32Uint = 7,
    IRFormatR32G32B32Sint = 8,
    IRFormatR16G16B16A16Typeless = 9,
    IRFormatR16G16B16A16Float = 10,
    IRFormatR16G16B16A16Unorm = 11,
    IRFormatR16G16B16A16Uint = 12,
    IRFormatR16G16B16A16Snorm = 13,
    IRFormatR16G16B16A16Sint = 14,
    IRFormatR32G32Typeless = 15,
    IRFormatR32G32Float = 16,
    IRFormatR32G32Uint = 17,
    IRFormatR32G32Sint = 18,
    IRFormatR32G8X24Typeless = 19,
    IRFormatD32FloatS8X24Uint = 20,
    IRFormatR32FloatX8X24Typeless = 21,
    IRFormatX32TypelessG8X24Uint = 22,
    IRFormatR10G10B10A2Typeless = 23,
    IRFormatR10G10B10A2Unorm = 24,
    IRFormatR10G10B10A2Uint = 25,
    IRFormatR11G11B10Float = 26,
    IRFormatR8G8B8A8Typeless = 27,
    IRFormatR8G8B8A8Unorm = 28,
    IRFormatR8G8B8A8Unorm_sRGB = 29,
    IRFormatR8G8B8A8Uint = 30,
    IRFormatR8G8B8A8Snorm = 31,
    IRFormatR8G8B8A8Sint = 32,
    IRFormatR16G16Typeless = 33,
    IRFormatR16G16Float = 34,
    IRFormatR16G16Unorm = 35,
    IRFormatR16G16Uint = 36,
    IRFormatR16G16Snorm = 37,
    IRFormatR16G16Sint = 38,
    IRFormatR32Typeless = 39,
    IRFormatD32Float = 40,
    IRFormatR32Float = 41,
    IRFormatR32Uint = 42,
    IRFormatR32Sint = 43,
    IRFormatR24G8Typeless = 44,
    IRFormatD24UnormS8Uint = 45,
    IRFormatR24UnormX8Typeless = 46,
    IRFormatX24TypelessG8Uint = 47,
    IRFormatR8G8Typeless = 48,
    IRFormatR8G8Unorm = 49,
    IRFormatR8G8Uint = 50,
    IRFormatR8G8Snorm = 51,
    IRFormatR8G8Sint = 52,
    IRFormatR16Typeless = 53,
    IRFormatR16Float = 54,
    IRFormatD16Unorm = 55,
    IRFormatR16Unorm = 56,
    IRFormatR16Uint = 57,
    IRFormatR16Snorm = 58,
    IRFormatR16Sint = 59,
    IRFormatR8Typeless = 60,
    IRFormatR8Unorm = 61,
    IRFormatR8Uint = 62,
    IRFormatR8Snorm = 63,
    IRFormatR8Sint = 64,
    IRFormatA8Unorm = 65,
    IRFormatR1Unorm = 66,
    IRFormatR9G9B9E5Sharedexp = 67,
    IRFormatR8G8B8G8Unorm = 68,
    IRFormatG8R8G8B8Unorm = 69,
    IRFormatBC1Typeless = 70,
    IRFormatBC1Unorm = 71,
    IRFormatBC1Unorm_sRGB = 72,
    IRFormatBC2Typeless = 73,
    IRFormatBC2Unorm = 74,
    IRFormatBC2Unorm_sRGB = 75,
    IRFormatBC3Typeless = 76,
    IRFormatBC3Unorm = 77,
    IRFormatBC3Unorm_sRGB = 78,
    IRFormatBC4Typeless = 79,
    IRFormatBC4Unorm = 80,
    IRFormatBC4Snorm = 81,
    IRFormatBC5Typeless = 82,
    IRFormatBC5Unorm = 83,
    IRFormatBC5Snorm = 84,
    IRFormatB5G6R5Unorm = 85,
    IRFormatB5G5R5A1Unorm = 86,
    IRFormatB8G8R8A8Unorm = 87,
    IRFormatB8G8R8X8Unorm = 88,
    IRFormatR10G10B10XRBiasA2Unorm = 89,
    IRFormatB8G8R8A8Typeless = 90,
    IRFormatB8G8R8A8Unorm_sRGB = 91,
    IRFormatB8G8R8X8Typeless = 92,
    IRFormatB8G8R8X8Unorm_sRGB = 93,
    IRFormatBC6HTypeless = 94,
    IRFormatBC6HUf16 = 95,
    IRFormatBC6HSf16 = 96,
    IRFormatBC7Typeless = 97,
    IRFormatBC7Unorm = 98,
    IRFormatBC7Unorm_sRGB = 99,
    IRFormatAYUV = 100,
    IRFormatY410 = 101,
    IRFormatY416 = 102,
    IRFormatNV12 = 103,
    IRFormatP010 = 104,
    IRFormatP016 = 105,
    IRFormat420Opaque = 106,
    IRFormatYUY2 = 107,
    IRFormatY210 = 108,
    IRFormatY216 = 109,
    IRFormatNV11 = 110,
    IRFormatAI44 = 111,
    IRFormatIA44 = 112,
    IRFormatP8 = 113,
    IRFormatA8P8 = 114,
    IRFormatB4G4R4A4Unorm = 115,
    IRFormatP208 = 130,
    IRFormatV208 = 131,
    IRFormatV408 = 132,
    IRFormatSamplerFeedbackMinMipOpaque = 189,
    IRFormatSamplerFeedbackMipRegionUsedOpaque = 190,
    IRFormatForceUint = 4294967295,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRInputClassification {
    IRInputClassificationPerVertexData = 0,
    IRInputClassificationPerInstanceData = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRInputPrimitive {
    IRInputPrimitiveUndefined = 0,
    IRInputPrimitivePoint = 1,
    IRInputPrimitiveLine = 2,
    IRInputPrimitiveTriangle = 3,
    IRInputPrimitiveLineAdj = 6,
    IRInputPrimitiveTriangleAdj = 7,
    IRInputPrimitive1ControlPointPatch = 8,
    IRInputPrimitive2ControlPointPatch = 9,
    IRInputPrimitive3ControlPointPatch = 10,
    IRInputPrimitive4ControlPointPatch = 11,
    IRInputPrimitive5ControlPointPatch = 12,
    IRInputPrimitive6ControlPointPatch = 13,
    IRInputPrimitive7ControlPointPatch = 14,
    IRInputPrimitive8ControlPointPatch = 15,
    IRInputPrimitive9ControlPointPatch = 16,
    IRInputPrimitive10ControlPointPatch = 17,
    IRInputPrimitive11ControlPointPatch = 18,
    IRInputPrimitive12ControlPointPatch = 19,
    IRInputPrimitive13ControlPointPatch = 20,
    IRInputPrimitive14ControlPointPatch = 21,
    IRInputPrimitive15ControlPointPatch = 22,
    IRInputPrimitive16ControlPointPatch = 23,
    IRInputPrimitive17ControlPointPatch = 24,
    IRInputPrimitive18ControlPointPatch = 25,
    IRInputPrimitive19ControlPointPatch = 26,
    IRInputPrimitive20ControlPointPatch = 27,
    IRInputPrimitive21ControlPointPatch = 28,
    IRInputPrimitive22ControlPointPatch = 29,
    IRInputPrimitive23ControlPointPatch = 30,
    IRInputPrimitive24ControlPointPatch = 31,
    IRInputPrimitive25ControlPointPatch = 32,
    IRInputPrimitive26ControlPointPatch = 33,
    IRInputPrimitive27ControlPointPatch = 34,
    IRInputPrimitive28ControlPointPatch = 35,
    IRInputPrimitive29ControlPointPatch = 36,
    IRInputPrimitive30ControlPointPatch = 37,
    IRInputPrimitive31ControlPointPatch = 38,
    IRInputPrimitive32ControlPointPatch = 39,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRInputTopology {
    IRInputTopologyUndefined = 0,
    IRInputTopologyPoint = 1,
    IRInputTopologyLine = 2,
    IRInputTopologyTriangle = 3,
    IRInputTopologyPatch = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRTessellatorOutputPrimitive {
    IRTessellatorOutputUndefined = 0,
    IRTessellatorOutputPoint = 1,
    IRTessellatorOutputLine = 2,
    IRTessellatorOutputTriangleCW = 3,
    IRTessellatorOutputTriangleCCW = 4,
}
impl IRRootDescriptorFlags {
    pub const IRRootDescriptorFlagNone: IRRootDescriptorFlags = IRRootDescriptorFlags(0);
}
impl IRRootDescriptorFlags {
    pub const IRRootDescriptorFlagDataVolatile: IRRootDescriptorFlags = IRRootDescriptorFlags(2);
}
impl IRRootDescriptorFlags {
    pub const IRRootDescriptorFlagDataStaticWhileSetAtExecute: IRRootDescriptorFlags =
        IRRootDescriptorFlags(4);
}
impl IRRootDescriptorFlags {
    pub const IRRootDescriptorFlagDataStatic: IRRootDescriptorFlags = IRRootDescriptorFlags(8);
}
impl ::std::ops::BitOr<IRRootDescriptorFlags> for IRRootDescriptorFlags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        IRRootDescriptorFlags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for IRRootDescriptorFlags {
    #[inline]
    fn bitor_assign(&mut self, rhs: IRRootDescriptorFlags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<IRRootDescriptorFlags> for IRRootDescriptorFlags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        IRRootDescriptorFlags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for IRRootDescriptorFlags {
    #[inline]
    fn bitand_assign(&mut self, rhs: IRRootDescriptorFlags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct IRRootDescriptorFlags(pub ::std::os::raw::c_uint);
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagNone: IRRootSignatureFlags = IRRootSignatureFlags(0);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagAllowInputAssemblerInputLayout: IRRootSignatureFlags =
        IRRootSignatureFlags(1);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagDenyVertexShaderRootAccess: IRRootSignatureFlags =
        IRRootSignatureFlags(2);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagDenyHullShaderRootAccess: IRRootSignatureFlags =
        IRRootSignatureFlags(4);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagDenyDomainShaderRootAccess: IRRootSignatureFlags =
        IRRootSignatureFlags(8);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagDenyGeometryShaderRootAccess: IRRootSignatureFlags =
        IRRootSignatureFlags(16);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagDenyPixelShaderRootAccess: IRRootSignatureFlags =
        IRRootSignatureFlags(32);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagAllowStreamOutput: IRRootSignatureFlags = IRRootSignatureFlags(64);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagLocalRootSignature: IRRootSignatureFlags =
        IRRootSignatureFlags(128);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagDenyAmplificationShaderRootAccess: IRRootSignatureFlags =
        IRRootSignatureFlags(256);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagDenyMeshShaderRootAccess: IRRootSignatureFlags =
        IRRootSignatureFlags(512);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagCBVSRVUAVHeapDirectlyIndexed: IRRootSignatureFlags =
        IRRootSignatureFlags(1024);
}
impl IRRootSignatureFlags {
    pub const IRRootSignatureFlagSamplerHeapDirectlyIndexed: IRRootSignatureFlags =
        IRRootSignatureFlags(2048);
}
impl ::std::ops::BitOr<IRRootSignatureFlags> for IRRootSignatureFlags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        IRRootSignatureFlags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for IRRootSignatureFlags {
    #[inline]
    fn bitor_assign(&mut self, rhs: IRRootSignatureFlags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<IRRootSignatureFlags> for IRRootSignatureFlags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        IRRootSignatureFlags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for IRRootSignatureFlags {
    #[inline]
    fn bitand_assign(&mut self, rhs: IRRootSignatureFlags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct IRRootSignatureFlags(pub ::std::os::raw::c_uint);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRShaderVisibility {
    IRShaderVisibilityAll = 0,
    IRShaderVisibilityVertex = 1,
    IRShaderVisibilityHull = 2,
    IRShaderVisibilityDomain = 3,
    IRShaderVisibilityGeometry = 4,
    IRShaderVisibilityPixel = 5,
    IRShaderVisibilityAmplification = 6,
    IRShaderVisibilityMesh = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRTessellatorDomain {
    IRTessellatorDomainUndefined = 0,
    IRTessellatorDomainIsoline = 1,
    IRTessellatorDomainTri = 2,
    IRTessellatorDomainQuad = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRTessellatorPartitioning {
    IRTessellatorPartitioningUndefined = 0,
    IRTessellatorPartitioningInteger = 1,
    IRTessellatorPartitioningPow2 = 2,
    IRTessellatorPartitioningFractionalOdd = 3,
    IRTessellatorPartitioningFractionalEven = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRTextureAddressMode {
    IRTextureAddressModeWrap = 1,
    IRTextureAddressModeMirror = 2,
    IRTextureAddressModeClamp = 3,
    IRTextureAddressModeBorder = 4,
    IRTextureAddressModeMirrorOnce = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRShaderStage {
    IRShaderStageInvalid = 0,
    IRShaderStageVertex = 1,
    IRShaderStageFragment = 2,
    IRShaderStageHull = 3,
    IRShaderStageDomain = 4,
    IRShaderStageMesh = 5,
    IRShaderStageAmplification = 6,
    IRShaderStageGeometry = 7,
    IRShaderStageCompute = 8,
    IRShaderStageClosestHit = 9,
    IRShaderStageIntersection = 10,
    IRShaderStageAnyHit = 11,
    IRShaderStageMiss = 12,
    IRShaderStageRayGeneration = 13,
    IRShaderStageCallable = 14,
    IRShaderStageStreamOut = 15,
    IRShaderStageStageIn = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRObjectType {
    IRObjectTypeDXILBytecode = 0,
    IRObjectTypeMetalIRObject = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRResourceType {
    IRResourceTypeTable = 0,
    IRResourceTypeConstant = 1,
    IRResourceTypeCBV = 2,
    IRResourceTypeSRV = 3,
    IRResourceTypeUAV = 4,
    IRResourceTypeSampler = 5,
    IRResourceTypeInvalid = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRDescriptorRangeType {
    IRDescriptorRangeTypeSRV = 0,
    IRDescriptorRangeTypeUAV = 1,
    IRDescriptorRangeTypeCBV = 2,
    IRDescriptorRangeTypeSampler = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRDescriptorRange {
    pub RangeType: IRDescriptorRangeType,
    pub NumDescriptors: u32,
    pub BaseShaderRegister: u32,
    pub RegisterSpace: u32,
    pub OffsetInDescriptorsFromTableStart: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRRootDescriptorTable {
    pub NumDescriptorRanges: u32,
    pub pDescriptorRanges: *const IRDescriptorRange,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRVertexInputTable {
    pub NumDescriptorRanges: u32,
    pub pDescriptorRanges: *const IRDescriptorRange,
}
pub type IRVertexInput = IRVertexInputTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRRootConstants {
    pub ShaderRegister: u32,
    pub RegisterSpace: u32,
    pub Num32BitValues: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRRootDescriptor {
    pub ShaderRegister: u32,
    pub RegisterSpace: u32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRStripCutIndex {
    IRStripCutIndexDisabled = 0,
    IRStripCutIndex0xFFFF = 1,
    IRStripCutIndex0xFFFFFFFF = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRRootParameterType {
    IRRootParameterTypeDescriptorTable = 0,
    IRRootParameterType32BitConstants = 1,
    IRRootParameterTypeCBV = 2,
    IRRootParameterTypeSRV = 3,
    IRRootParameterTypeUAV = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRRootParameter {
    pub ParameterType: IRRootParameterType,
    pub __bindgen_anon_1: IRRootParameter__bindgen_ty_1,
    pub ShaderVisibility: IRShaderVisibility,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRRootParameter__bindgen_ty_1 {
    pub DescriptorTable: IRRootDescriptorTable,
    pub Constants: IRRootConstants,
    pub Descriptor: IRRootDescriptor,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRStaticBorderColor {
    IRStaticBorderColorTransparentBlack = 0,
    IRStaticBorderColorOpaqueBlack = 1,
    IRStaticBorderColorOpaqueWhite = 2,
}
impl IRCompatibilityFlags {
    pub const IRCompatibilityFlagNone: IRCompatibilityFlags = IRCompatibilityFlags(0);
}
impl IRCompatibilityFlags {
    pub const IRCompatibilityFlagBoundsCheck: IRCompatibilityFlags = IRCompatibilityFlags(1);
}
impl IRCompatibilityFlags {
    pub const IRCompatibilityFlagVertexPositionInfToNan: IRCompatibilityFlags =
        IRCompatibilityFlags(2);
}
impl IRCompatibilityFlags {
    pub const IRCompatibilityFlagTextureMinLODClamp: IRCompatibilityFlags = IRCompatibilityFlags(4);
}
impl IRCompatibilityFlags {
    pub const IRCompatibilityFlagSamplerLODBias: IRCompatibilityFlags = IRCompatibilityFlags(8);
}
impl IRCompatibilityFlags {
    pub const IRCompatibilityFlagPositionInvariance: IRCompatibilityFlags =
        IRCompatibilityFlags(16);
}
impl ::std::ops::BitOr<IRCompatibilityFlags> for IRCompatibilityFlags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        IRCompatibilityFlags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for IRCompatibilityFlags {
    #[inline]
    fn bitor_assign(&mut self, rhs: IRCompatibilityFlags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<IRCompatibilityFlags> for IRCompatibilityFlags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        IRCompatibilityFlags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for IRCompatibilityFlags {
    #[inline]
    fn bitand_assign(&mut self, rhs: IRCompatibilityFlags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct IRCompatibilityFlags(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRStaticSamplerDescriptor {
    pub Filter: IRFilter,
    pub AddressU: IRTextureAddressMode,
    pub AddressV: IRTextureAddressMode,
    pub AddressW: IRTextureAddressMode,
    pub MipLODBias: f32,
    pub MaxAnisotropy: u32,
    pub ComparisonFunc: IRComparisonFunction,
    pub BorderColor: IRStaticBorderColor,
    pub MinLOD: f32,
    pub MaxLOD: f32,
    pub ShaderRegister: u32,
    pub RegisterSpace: u32,
    pub ShaderVisibility: IRShaderVisibility,
}
impl IRRootSignatureVersion {
    pub const IRRootSignatureVersion_1_0: IRRootSignatureVersion =
        IRRootSignatureVersion::IRRootSignatureVersion_1;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRRootSignatureVersion {
    IRRootSignatureVersion_1 = 1,
    IRRootSignatureVersion_1_1 = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRRootSignatureDescriptor {
    pub NumParameters: u32,
    pub pParameters: *const IRRootParameter,
    pub NumStaticSamplers: u32,
    pub pStaticSamplers: *const IRStaticSamplerDescriptor,
    pub Flags: IRRootSignatureFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRDescriptorRange1 {
    pub RangeType: IRDescriptorRangeType,
    pub NumDescriptors: u32,
    pub BaseShaderRegister: u32,
    pub RegisterSpace: u32,
    pub Flags: IRDescriptorRangeFlags,
    pub OffsetInDescriptorsFromTableStart: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRRootDescriptorTable1 {
    pub NumDescriptorRanges: u32,
    pub pDescriptorRanges: *const IRDescriptorRange1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRRootDescriptor1 {
    pub ShaderRegister: u32,
    pub RegisterSpace: u32,
    pub Flags: IRRootDescriptorFlags,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRRootParameter1 {
    pub ParameterType: IRRootParameterType,
    pub __bindgen_anon_1: IRRootParameter1__bindgen_ty_1,
    pub ShaderVisibility: IRShaderVisibility,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRRootParameter1__bindgen_ty_1 {
    pub DescriptorTable: IRRootDescriptorTable1,
    pub Constants: IRRootConstants,
    pub Descriptor: IRRootDescriptor1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRRootSignatureDescriptor1 {
    pub NumParameters: u32,
    pub pParameters: *const IRRootParameter1,
    pub NumStaticSamplers: u32,
    pub pStaticSamplers: *const IRStaticSamplerDescriptor,
    pub Flags: IRRootSignatureFlags,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRVersionedRootSignatureDescriptor {
    pub version: IRRootSignatureVersion,
    pub __bindgen_anon_1: IRVersionedRootSignatureDescriptor__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRVersionedRootSignatureDescriptor__bindgen_ty_1 {
    pub desc_1_0: IRRootSignatureDescriptor,
    pub desc_1_1: IRRootSignatureDescriptor1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRInputElementDescriptor1 {
    pub semanticIndex: u32,
    pub format: IRFormat,
    pub inputSlot: u32,
    pub alignedByteOffset: u32,
    pub inputSlotClass: IRInputClassification,
    pub instanceDataStepRate: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRInputLayoutDescriptor1 {
    pub semanticNames: [*const ::std::os::raw::c_char; 31usize],
    pub inputElementDescs: [IRInputElementDescriptor1; 31usize],
    pub numElements: u32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRInputLayoutDescriptorVersion {
    IRInputLayoutDescriptorVersion_1 = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRVersionedInputLayoutDescriptor {
    pub version: IRInputLayoutDescriptorVersion,
    pub __bindgen_anon_1: IRVersionedInputLayoutDescriptor__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRVersionedInputLayoutDescriptor__bindgen_ty_1 {
    pub desc_1_0: IRInputLayoutDescriptor1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRErrorCode {
    IRErrorCodeNoError = 0,
    IRErrorCodeShaderRequiresRootSignature = 1,
    IRErrorCodeUnrecognizedRootSignatureDescriptor = 2,
    IRErrorCodeUnrecognizedParameterTypeInRootSignature = 3,
    IRErrorCodeResourceNotReferencedByRootSignature = 4,
    IRErrorCodeShaderIncompatibleWithDualSourceBlending = 5,
    IRErrorCodeUnsupportedWaveSize = 6,
    IRErrorCodeUnsupportedInstruction = 7,
    IRErrorCodeCompilationError = 8,
    IRErrorCodeFailedToSynthesizeStageInFunction = 9,
    IRErrorCodeFailedToSynthesizeStreamOutFunction = 10,
    IRErrorCodeFailedToSynthesizeIntersectionWrapperFunction = 11,
    IRErrorCodeUnableToVerifyModule = 12,
    IRErrorCodeUnableToLinkModule = 13,
    IRErrorCodeUnknown = 14,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRBytecodeOwnership {
    IRBytecodeOwnershipNone = 0,
    IRBytecodeOwnershipCopy = 1,
}
impl IRCompilerValidationFlags {
    pub const IRCompilerValidationFlagNone: IRCompilerValidationFlags =
        IRCompilerValidationFlags(0);
}
impl IRCompilerValidationFlags {
    pub const IRCompilerValidationFlagValidateRawRootResources: IRCompilerValidationFlags =
        IRCompilerValidationFlags(1);
}
impl IRCompilerValidationFlags {
    pub const IRCompilerValidationFlagValidateAllResourcesBound: IRCompilerValidationFlags =
        IRCompilerValidationFlags(2);
}
impl IRCompilerValidationFlags {
    pub const IRCompilerValidationFlagAll: IRCompilerValidationFlags =
        IRCompilerValidationFlags(-1);
}
impl ::std::ops::BitOr<IRCompilerValidationFlags> for IRCompilerValidationFlags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        IRCompilerValidationFlags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for IRCompilerValidationFlags {
    #[inline]
    fn bitor_assign(&mut self, rhs: IRCompilerValidationFlags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<IRCompilerValidationFlags> for IRCompilerValidationFlags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        IRCompilerValidationFlags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for IRCompilerValidationFlags {
    #[inline]
    fn bitand_assign(&mut self, rhs: IRCompilerValidationFlags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct IRCompilerValidationFlags(pub ::std::os::raw::c_int);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRStageInCodeGenerationMode {
    IRStageInCodeGenerationModeUseMetalVertexFetch = 0,
    IRStageInCodeGenerationModeUseSeparateStageInFunction = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRDualSourceBlendingConfiguration {
    IRDualSourceBlendingConfigurationDecideAtRuntime = 0,
    IRDualSourceBlendingConfigurationForceEnabled = 1,
    IRDualSourceBlendingConfigurationForceDisabled = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRDepthFeedbackConfiguration {
    IRDepthFeedbackConfigurationDecideAtRuntime = 0,
    IRDepthFeedbackConfigurationForceEnabled = 1,
    IRDepthFeedbackConfigurationForceDisabled = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRGPUFamily {
    IRGPUFamilyApple6 = 1006,
    IRGPUFamilyApple7 = 1007,
    IRGPUFamilyApple8 = 1008,
    IRGPUFamilyMac2 = 2002,
    IRGPUFamilyMetal3 = 5001,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IROperatingSystem {
    IROperatingSystem_macOS = 0,
    IROperatingSystem_iOS = 1,
    IROperatingSystem_tvOS = 2,
    IROperatingSystem_iOSSimulator = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRFunctionConstantType {
    IRFunctionConstantTypeBool = 53,
    IRFunctionConstantTypeInt = 29,
    IRFunctionConstantTypeFloat = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRFunctionConstant {
    pub name: *const ::std::os::raw::c_char,
    pub type_: IRFunctionConstantType,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRReflectionVersion {
    IRReflectionVersion_1_0 = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRCSInfo_1_0 {
    pub tg_size: [u32; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRVersionedCSInfo {
    pub version: IRReflectionVersion,
    pub __bindgen_anon_1: IRVersionedCSInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRVersionedCSInfo__bindgen_ty_1 {
    pub info_1_0: IRCSInfo_1_0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRVertexInputInfo_1_0 {
    pub name: *const ::std::os::raw::c_char,
    pub attributeIndex: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRVSInfo_1_0 {
    pub instance_id_index: ::std::os::raw::c_int,
    pub vertex_id_index: ::std::os::raw::c_int,
    pub vertex_output_size_in_bytes: u32,
    pub needs_draw_params: bool,
    pub vertex_inputs: *mut IRVertexInputInfo_1_0,
    pub num_vertex_inputs: usize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRVersionedVSInfo {
    pub version: IRReflectionVersion,
    pub __bindgen_anon_1: IRVersionedVSInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRVersionedVSInfo__bindgen_ty_1 {
    pub info_1_0: IRVSInfo_1_0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRFSInfo_1_0 {
    pub num_render_targets: ::std::os::raw::c_int,
    pub rt_index_int: u8,
    pub discards: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRVersionedFSInfo {
    pub version: IRReflectionVersion,
    pub __bindgen_anon_1: IRVersionedFSInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRVersionedFSInfo__bindgen_ty_1 {
    pub info_1_0: IRFSInfo_1_0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRVertexOutputInfo_1_0 {
    pub name: *const ::std::os::raw::c_char,
    pub attributeIndex: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRGSInfo_1_0 {
    pub vertex_outputs: *mut IRVertexOutputInfo_1_0,
    pub num_vertex_outputs: usize,
    pub is_passthrough: bool,
    pub rt_array_index_record_id: i32,
    pub viewport_array_index_record_id: i32,
    pub input_primitive: IRInputPrimitive,
    pub max_input_primitives_per_mesh_threadgroup: u32,
    pub max_payload_size_in_bytes: u32,
    pub instance_count: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRVersionedGSInfo {
    pub version: IRReflectionVersion,
    pub __bindgen_anon_1: IRVersionedGSInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRVersionedGSInfo__bindgen_ty_1 {
    pub info_1_0: IRGSInfo_1_0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRHSInfo_1_0 {
    pub max_patches_per_object_threadgroup: u32,
    pub max_object_threads_per_patch: u32,
    pub patch_constants_size: u32,
    pub patch_constant_function: *const ::std::os::raw::c_char,
    pub static_payload_size: u32,
    pub payload_size_per_patch: u32,
    pub input_control_point_count: u32,
    pub output_control_point_count: u32,
    pub output_control_point_size: u32,
    pub tessellator_domain: IRTessellatorDomain,
    pub tessellator_partitioning: IRTessellatorPartitioning,
    pub tessellator_output_primitive: IRTessellatorOutputPrimitive,
    pub tessellation_type_half: bool,
    pub max_tessellation_factor: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRVersionedHSInfo {
    pub version: IRReflectionVersion,
    pub __bindgen_anon_1: IRVersionedHSInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRVersionedHSInfo__bindgen_ty_1 {
    pub info_1_0: IRHSInfo_1_0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRDSInfo_1_0 {
    pub tessellator_domain: IRTessellatorDomain,
    pub max_input_prims_per_mesh_threadgroup: u32,
    pub input_control_point_count: u32,
    pub input_control_point_size: u32,
    pub patch_constants_size: u32,
    pub tessellation_type_half: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IRVersionedDSInfo {
    pub version: IRReflectionVersion,
    pub __bindgen_anon_1: IRVersionedDSInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IRVersionedDSInfo__bindgen_ty_1 {
    pub info_1_0: IRDSInfo_1_0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IRResourceLocation {
    pub resourceType: IRResourceType,
    pub space: u32,
    pub slot: u32,
    pub topLevelOffset: u32,
    pub sizeBytes: u64,
    pub resourceName: *const ::std::os::raw::c_char,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
extern crate libloading;
pub struct metal_irconverter {
    __library: ::libloading::Library,
    pub IRErrorGetCode: unsafe extern "C" fn(error: *const IRError) -> u32,
    pub IRErrorGetPayload:
        unsafe extern "C" fn(error: *const IRError) -> *const ::std::os::raw::c_void,
    pub IRErrorDestroy: unsafe extern "C" fn(error: *mut IRError),
    pub IRRootSignatureCreateFromDescriptor: unsafe extern "C" fn(
        descriptor: *const IRVersionedRootSignatureDescriptor,
        error: *mut *mut IRError,
    ) -> *mut IRRootSignature,
    pub IRRootSignatureDestroy: unsafe extern "C" fn(sig: *mut IRRootSignature),
    pub IRObjectCreateFromDXIL: unsafe extern "C" fn(
        bytecode: *const u8,
        size: usize,
        bytecodeOwnership: IRBytecodeOwnership,
    ) -> *mut IRObject,
    pub IRObjectDestroy: unsafe extern "C" fn(object: *mut IRObject),
    pub IRObjectGetType: unsafe extern "C" fn(object: *const IRObject) -> IRObjectType,
    pub IRObjectGetMetalIRShaderStage:
        unsafe extern "C" fn(object: *const IRObject) -> IRShaderStage,
    pub IRCompilerSetValidationFlags:
        unsafe extern "C" fn(compiler: *mut IRCompiler, validationFlags: IRCompilerValidationFlags),
    pub IRCompilerCreate: unsafe extern "C" fn() -> *mut IRCompiler,
    pub IRCompilerDestroy: unsafe extern "C" fn(compiler: *mut IRCompiler),
    pub IRCompilerAllocCompileAndLink: unsafe extern "C" fn(
        compiler: *mut IRCompiler,
        entryPointNames: *const *const ::std::os::raw::c_char,
        entryPointCount: usize,
        input: *const IRObject,
        error: *mut *mut IRError,
    ) -> *mut IRObject,
    pub IRObjectGetMetalLibBinary: unsafe extern "C" fn(
        obj: *const IRObject,
        stage: IRShaderStage,
        lib: *mut IRMetalLibBinary,
    ) -> bool,
    pub IRCompilerSetStageInGenerationMode: unsafe extern "C" fn(
        compiler: *mut IRCompiler,
        stageInCodeGenerationMode: IRStageInCodeGenerationMode,
    ),
    pub IRMetalLibSynthesizeStageInFunction: unsafe extern "C" fn(
        compiler: *const IRCompiler,
        vertexShaderReflection: *const IRShaderReflection,
        layout: *const IRVersionedInputLayoutDescriptor,
        binary: *mut IRMetalLibBinary,
    ) -> bool,
    pub IRObjectGetReflection: unsafe extern "C" fn(
        obj: *const IRObject,
        stage: IRShaderStage,
        reflection: *mut IRShaderReflection,
    ) -> bool,
    pub IRCompilerSetGlobalRootSignature:
        unsafe extern "C" fn(compiler: *mut IRCompiler, rootSignature: *const IRRootSignature),
    pub IRCompilerSetCompatibilityFlags:
        unsafe extern "C" fn(compiler: *mut IRCompiler, flags: IRCompatibilityFlags),
    pub IRCompilerSetInputTopology:
        unsafe extern "C" fn(compiler: *mut IRCompiler, inputTopology: IRInputTopology),
    pub IRCompilerEnableGeometryAndTessellationEmulation:
        unsafe extern "C" fn(compiler: *mut IRCompiler, enable: bool),
    pub IRCompilerSetDualSourceBlendingConfiguration: unsafe extern "C" fn(
        compiler: *mut IRCompiler,
        configuration: IRDualSourceBlendingConfiguration,
    ),
    pub IRCompilerSetDepthFeedbackConfiguration: unsafe extern "C" fn(
        compiler: *mut IRCompiler,
        configuration: IRDepthFeedbackConfiguration,
    ),
    pub IRMetalLibSynthesizeIntersectionWrapperFunction:
        unsafe extern "C" fn(compiler: *const IRCompiler, binary: *mut IRMetalLibBinary) -> bool,
    pub IRCompilerSetEntryPointName:
        unsafe extern "C" fn(compiler: *mut IRCompiler, newName: *const ::std::os::raw::c_char),
    pub IRCompilerSetMinimumGPUFamily:
        unsafe extern "C" fn(compiler: *mut IRCompiler, family: IRGPUFamily),
    pub IRCompilerSetMinimumDeploymentTarget: unsafe extern "C" fn(
        compiler: *mut IRCompiler,
        operatingSystem: IROperatingSystem,
        version: *const ::std::os::raw::c_char,
    ),
    pub IRMetalLibBinaryCreate: unsafe extern "C" fn() -> *mut IRMetalLibBinary,
    pub IRMetalLibBinaryDestroy: unsafe extern "C" fn(lib: *mut IRMetalLibBinary),
    pub IRMetalLibGetBytecode:
        unsafe extern "C" fn(lib: *const IRMetalLibBinary, outBytecode: *mut u8) -> usize,
    pub IRMetalLibGetBytecodeSize: unsafe extern "C" fn(lib: *const IRMetalLibBinary) -> usize,
    pub IRObjectSerialize: unsafe extern "C" fn(
        outputPath: *const ::std::os::raw::c_char,
        obj: *const IRObject,
        stage: IRShaderStage,
    ) -> bool,
    pub IRShaderReflectionCreate: unsafe extern "C" fn() -> *mut IRShaderReflection,
    pub IRShaderReflectionDestroy: unsafe extern "C" fn(reflection: *mut IRShaderReflection),
    pub IRShaderReflectionGetEntryPointFunctionName:
        unsafe extern "C" fn(
            reflection: *const IRShaderReflection,
        ) -> *const ::std::os::raw::c_char,
    pub IRShaderReflectionNeedsFunctionConstants:
        unsafe extern "C" fn(reflection: *const IRShaderReflection) -> bool,
    pub IRShaderReflectionGetFunctionConstantCount:
        unsafe extern "C" fn(reflection: *const IRShaderReflection) -> usize,
    pub IRShaderReflectionCopyFunctionConstants: unsafe extern "C" fn(
        reflection: *const IRShaderReflection,
        functionConstants: *mut IRFunctionConstant,
    ),
    pub IRShaderReflectionReleaseFunctionConstants: unsafe extern "C" fn(
        functionConstants: *mut IRFunctionConstant,
        functionConstantCount: usize,
    ),
    pub IRShaderReflectionCopyComputeInfo: unsafe extern "C" fn(
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        csinfo: *mut IRVersionedCSInfo,
    ) -> bool,
    pub IRShaderReflectionCopyVertexInfo: unsafe extern "C" fn(
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        vsinfo: *mut IRVersionedVSInfo,
    ) -> bool,
    pub IRShaderReflectionCopyFragmentInfo: unsafe extern "C" fn(
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        fsinfo: *mut IRVersionedFSInfo,
    ) -> bool,
    pub IRShaderReflectionCopyGeometryInfo: unsafe extern "C" fn(
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        gsinfo: *mut IRVersionedGSInfo,
    ) -> bool,
    pub IRShaderReflectionCopyHullInfo: unsafe extern "C" fn(
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        hsinfo: *mut IRVersionedHSInfo,
    ) -> bool,
    pub IRShaderReflectionCopyDomainInfo: unsafe extern "C" fn(
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        dsinfo: *mut IRVersionedDSInfo,
    ) -> bool,
    pub IRShaderReflectionReleaseComputeInfo:
        unsafe extern "C" fn(csinfo: *mut IRVersionedCSInfo) -> bool,
    pub IRShaderReflectionReleaseVertexInfo:
        unsafe extern "C" fn(vsinfo: *mut IRVersionedVSInfo) -> bool,
    pub IRShaderReflectionReleaseFragmentInfo:
        unsafe extern "C" fn(fsinfo: *mut IRVersionedFSInfo) -> bool,
    pub IRShaderReflectionReleaseGeometryInfo:
        unsafe extern "C" fn(gsinfo: *mut IRVersionedGSInfo) -> bool,
    pub IRShaderReflectionReleaseHullInfo:
        unsafe extern "C" fn(hsinfo: *mut IRVersionedHSInfo) -> bool,
    pub IRShaderReflectionReleaseDomainInfo:
        unsafe extern "C" fn(dsinfo: *mut IRVersionedDSInfo) -> bool,
    pub IRShaderReflectionGetResourceCount:
        unsafe extern "C" fn(reflection: *const IRShaderReflection) -> usize,
    pub IRShaderReflectionGetResourceLocations: unsafe extern "C" fn(
        reflection: *const IRShaderReflection,
        resourceLocations: *mut IRResourceLocation,
    ),
    pub IRRootSignatureGetResourceCount:
        unsafe extern "C" fn(rootSignature: *const IRRootSignature) -> usize,
    pub IRRootSignatureGetResourceLocations: unsafe extern "C" fn(
        rootSignature: *const IRRootSignature,
        resourceLocations: *mut IRResourceLocation,
    ),
    pub IRShaderReflectionSerialize:
        unsafe extern "C" fn(reflection: *mut IRShaderReflection) -> *const ::std::os::raw::c_char,
    pub IRShaderReflectionDeserialize: unsafe extern "C" fn(
        blob: *const ::std::os::raw::c_char,
        reflection: *mut IRShaderReflection,
    ),
}
impl metal_irconverter {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let IRErrorGetCode = __library.get(b"IRErrorGetCode\0").map(|sym| *sym)?;
        let IRErrorGetPayload = __library.get(b"IRErrorGetPayload\0").map(|sym| *sym)?;
        let IRErrorDestroy = __library.get(b"IRErrorDestroy\0").map(|sym| *sym)?;
        let IRRootSignatureCreateFromDescriptor = __library
            .get(b"IRRootSignatureCreateFromDescriptor\0")
            .map(|sym| *sym)?;
        let IRRootSignatureDestroy = __library.get(b"IRRootSignatureDestroy\0").map(|sym| *sym)?;
        let IRObjectCreateFromDXIL = __library.get(b"IRObjectCreateFromDXIL\0").map(|sym| *sym)?;
        let IRObjectDestroy = __library.get(b"IRObjectDestroy\0").map(|sym| *sym)?;
        let IRObjectGetType = __library.get(b"IRObjectGetType\0").map(|sym| *sym)?;
        let IRObjectGetMetalIRShaderStage = __library
            .get(b"IRObjectGetMetalIRShaderStage\0")
            .map(|sym| *sym)?;
        let IRCompilerSetValidationFlags = __library
            .get(b"IRCompilerSetValidationFlags\0")
            .map(|sym| *sym)?;
        let IRCompilerCreate = __library.get(b"IRCompilerCreate\0").map(|sym| *sym)?;
        let IRCompilerDestroy = __library.get(b"IRCompilerDestroy\0").map(|sym| *sym)?;
        let IRCompilerAllocCompileAndLink = __library
            .get(b"IRCompilerAllocCompileAndLink\0")
            .map(|sym| *sym)?;
        let IRObjectGetMetalLibBinary = __library
            .get(b"IRObjectGetMetalLibBinary\0")
            .map(|sym| *sym)?;
        let IRCompilerSetStageInGenerationMode = __library
            .get(b"IRCompilerSetStageInGenerationMode\0")
            .map(|sym| *sym)?;
        let IRMetalLibSynthesizeStageInFunction = __library
            .get(b"IRMetalLibSynthesizeStageInFunction\0")
            .map(|sym| *sym)?;
        let IRObjectGetReflection = __library.get(b"IRObjectGetReflection\0").map(|sym| *sym)?;
        let IRCompilerSetGlobalRootSignature = __library
            .get(b"IRCompilerSetGlobalRootSignature\0")
            .map(|sym| *sym)?;
        let IRCompilerSetCompatibilityFlags = __library
            .get(b"IRCompilerSetCompatibilityFlags\0")
            .map(|sym| *sym)?;
        let IRCompilerSetInputTopology = __library
            .get(b"IRCompilerSetInputTopology\0")
            .map(|sym| *sym)?;
        let IRCompilerEnableGeometryAndTessellationEmulation = __library
            .get(b"IRCompilerEnableGeometryAndTessellationEmulation\0")
            .map(|sym| *sym)?;
        let IRCompilerSetDualSourceBlendingConfiguration = __library
            .get(b"IRCompilerSetDualSourceBlendingConfiguration\0")
            .map(|sym| *sym)?;
        let IRCompilerSetDepthFeedbackConfiguration = __library
            .get(b"IRCompilerSetDepthFeedbackConfiguration\0")
            .map(|sym| *sym)?;
        let IRMetalLibSynthesizeIntersectionWrapperFunction = __library
            .get(b"IRMetalLibSynthesizeIntersectionWrapperFunction\0")
            .map(|sym| *sym)?;
        let IRCompilerSetEntryPointName = __library
            .get(b"IRCompilerSetEntryPointName\0")
            .map(|sym| *sym)?;
        let IRCompilerSetMinimumGPUFamily = __library
            .get(b"IRCompilerSetMinimumGPUFamily\0")
            .map(|sym| *sym)?;
        let IRCompilerSetMinimumDeploymentTarget = __library
            .get(b"IRCompilerSetMinimumDeploymentTarget\0")
            .map(|sym| *sym)?;
        let IRMetalLibBinaryCreate = __library.get(b"IRMetalLibBinaryCreate\0").map(|sym| *sym)?;
        let IRMetalLibBinaryDestroy = __library
            .get(b"IRMetalLibBinaryDestroy\0")
            .map(|sym| *sym)?;
        let IRMetalLibGetBytecode = __library.get(b"IRMetalLibGetBytecode\0").map(|sym| *sym)?;
        let IRMetalLibGetBytecodeSize = __library
            .get(b"IRMetalLibGetBytecodeSize\0")
            .map(|sym| *sym)?;
        let IRObjectSerialize = __library.get(b"IRObjectSerialize\0").map(|sym| *sym)?;
        let IRShaderReflectionCreate = __library
            .get(b"IRShaderReflectionCreate\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionDestroy = __library
            .get(b"IRShaderReflectionDestroy\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionGetEntryPointFunctionName = __library
            .get(b"IRShaderReflectionGetEntryPointFunctionName\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionNeedsFunctionConstants = __library
            .get(b"IRShaderReflectionNeedsFunctionConstants\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionGetFunctionConstantCount = __library
            .get(b"IRShaderReflectionGetFunctionConstantCount\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionCopyFunctionConstants = __library
            .get(b"IRShaderReflectionCopyFunctionConstants\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionReleaseFunctionConstants = __library
            .get(b"IRShaderReflectionReleaseFunctionConstants\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionCopyComputeInfo = __library
            .get(b"IRShaderReflectionCopyComputeInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionCopyVertexInfo = __library
            .get(b"IRShaderReflectionCopyVertexInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionCopyFragmentInfo = __library
            .get(b"IRShaderReflectionCopyFragmentInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionCopyGeometryInfo = __library
            .get(b"IRShaderReflectionCopyGeometryInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionCopyHullInfo = __library
            .get(b"IRShaderReflectionCopyHullInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionCopyDomainInfo = __library
            .get(b"IRShaderReflectionCopyDomainInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionReleaseComputeInfo = __library
            .get(b"IRShaderReflectionReleaseComputeInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionReleaseVertexInfo = __library
            .get(b"IRShaderReflectionReleaseVertexInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionReleaseFragmentInfo = __library
            .get(b"IRShaderReflectionReleaseFragmentInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionReleaseGeometryInfo = __library
            .get(b"IRShaderReflectionReleaseGeometryInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionReleaseHullInfo = __library
            .get(b"IRShaderReflectionReleaseHullInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionReleaseDomainInfo = __library
            .get(b"IRShaderReflectionReleaseDomainInfo\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionGetResourceCount = __library
            .get(b"IRShaderReflectionGetResourceCount\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionGetResourceLocations = __library
            .get(b"IRShaderReflectionGetResourceLocations\0")
            .map(|sym| *sym)?;
        let IRRootSignatureGetResourceCount = __library
            .get(b"IRRootSignatureGetResourceCount\0")
            .map(|sym| *sym)?;
        let IRRootSignatureGetResourceLocations = __library
            .get(b"IRRootSignatureGetResourceLocations\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionSerialize = __library
            .get(b"IRShaderReflectionSerialize\0")
            .map(|sym| *sym)?;
        let IRShaderReflectionDeserialize = __library
            .get(b"IRShaderReflectionDeserialize\0")
            .map(|sym| *sym)?;
        Ok(metal_irconverter {
            __library,
            IRErrorGetCode,
            IRErrorGetPayload,
            IRErrorDestroy,
            IRRootSignatureCreateFromDescriptor,
            IRRootSignatureDestroy,
            IRObjectCreateFromDXIL,
            IRObjectDestroy,
            IRObjectGetType,
            IRObjectGetMetalIRShaderStage,
            IRCompilerSetValidationFlags,
            IRCompilerCreate,
            IRCompilerDestroy,
            IRCompilerAllocCompileAndLink,
            IRObjectGetMetalLibBinary,
            IRCompilerSetStageInGenerationMode,
            IRMetalLibSynthesizeStageInFunction,
            IRObjectGetReflection,
            IRCompilerSetGlobalRootSignature,
            IRCompilerSetCompatibilityFlags,
            IRCompilerSetInputTopology,
            IRCompilerEnableGeometryAndTessellationEmulation,
            IRCompilerSetDualSourceBlendingConfiguration,
            IRCompilerSetDepthFeedbackConfiguration,
            IRMetalLibSynthesizeIntersectionWrapperFunction,
            IRCompilerSetEntryPointName,
            IRCompilerSetMinimumGPUFamily,
            IRCompilerSetMinimumDeploymentTarget,
            IRMetalLibBinaryCreate,
            IRMetalLibBinaryDestroy,
            IRMetalLibGetBytecode,
            IRMetalLibGetBytecodeSize,
            IRObjectSerialize,
            IRShaderReflectionCreate,
            IRShaderReflectionDestroy,
            IRShaderReflectionGetEntryPointFunctionName,
            IRShaderReflectionNeedsFunctionConstants,
            IRShaderReflectionGetFunctionConstantCount,
            IRShaderReflectionCopyFunctionConstants,
            IRShaderReflectionReleaseFunctionConstants,
            IRShaderReflectionCopyComputeInfo,
            IRShaderReflectionCopyVertexInfo,
            IRShaderReflectionCopyFragmentInfo,
            IRShaderReflectionCopyGeometryInfo,
            IRShaderReflectionCopyHullInfo,
            IRShaderReflectionCopyDomainInfo,
            IRShaderReflectionReleaseComputeInfo,
            IRShaderReflectionReleaseVertexInfo,
            IRShaderReflectionReleaseFragmentInfo,
            IRShaderReflectionReleaseGeometryInfo,
            IRShaderReflectionReleaseHullInfo,
            IRShaderReflectionReleaseDomainInfo,
            IRShaderReflectionGetResourceCount,
            IRShaderReflectionGetResourceLocations,
            IRRootSignatureGetResourceCount,
            IRRootSignatureGetResourceLocations,
            IRShaderReflectionSerialize,
            IRShaderReflectionDeserialize,
        })
    }
    pub unsafe fn IRErrorGetCode(&self, error: *const IRError) -> u32 {
        (self.IRErrorGetCode)(error)
    }
    pub unsafe fn IRErrorGetPayload(&self, error: *const IRError) -> *const ::std::os::raw::c_void {
        (self.IRErrorGetPayload)(error)
    }
    pub unsafe fn IRErrorDestroy(&self, error: *mut IRError) {
        (self.IRErrorDestroy)(error)
    }
    pub unsafe fn IRRootSignatureCreateFromDescriptor(
        &self,
        descriptor: *const IRVersionedRootSignatureDescriptor,
        error: *mut *mut IRError,
    ) -> *mut IRRootSignature {
        (self.IRRootSignatureCreateFromDescriptor)(descriptor, error)
    }
    pub unsafe fn IRRootSignatureDestroy(&self, sig: *mut IRRootSignature) {
        (self.IRRootSignatureDestroy)(sig)
    }
    pub unsafe fn IRObjectCreateFromDXIL(
        &self,
        bytecode: *const u8,
        size: usize,
        bytecodeOwnership: IRBytecodeOwnership,
    ) -> *mut IRObject {
        (self.IRObjectCreateFromDXIL)(bytecode, size, bytecodeOwnership)
    }
    pub unsafe fn IRObjectDestroy(&self, object: *mut IRObject) {
        (self.IRObjectDestroy)(object)
    }
    pub unsafe fn IRObjectGetType(&self, object: *const IRObject) -> IRObjectType {
        (self.IRObjectGetType)(object)
    }
    pub unsafe fn IRObjectGetMetalIRShaderStage(&self, object: *const IRObject) -> IRShaderStage {
        (self.IRObjectGetMetalIRShaderStage)(object)
    }
    pub unsafe fn IRCompilerSetValidationFlags(
        &self,
        compiler: *mut IRCompiler,
        validationFlags: IRCompilerValidationFlags,
    ) {
        (self.IRCompilerSetValidationFlags)(compiler, validationFlags)
    }
    pub unsafe fn IRCompilerCreate(&self) -> *mut IRCompiler {
        (self.IRCompilerCreate)()
    }
    pub unsafe fn IRCompilerDestroy(&self, compiler: *mut IRCompiler) {
        (self.IRCompilerDestroy)(compiler)
    }
    pub unsafe fn IRCompilerAllocCompileAndLink(
        &self,
        compiler: *mut IRCompiler,
        entryPointNames: *const *const ::std::os::raw::c_char,
        entryPointCount: usize,
        input: *const IRObject,
        error: *mut *mut IRError,
    ) -> *mut IRObject {
        (self.IRCompilerAllocCompileAndLink)(
            compiler,
            entryPointNames,
            entryPointCount,
            input,
            error,
        )
    }
    pub unsafe fn IRObjectGetMetalLibBinary(
        &self,
        obj: *const IRObject,
        stage: IRShaderStage,
        lib: *mut IRMetalLibBinary,
    ) -> bool {
        (self.IRObjectGetMetalLibBinary)(obj, stage, lib)
    }
    pub unsafe fn IRCompilerSetStageInGenerationMode(
        &self,
        compiler: *mut IRCompiler,
        stageInCodeGenerationMode: IRStageInCodeGenerationMode,
    ) {
        (self.IRCompilerSetStageInGenerationMode)(compiler, stageInCodeGenerationMode)
    }
    pub unsafe fn IRMetalLibSynthesizeStageInFunction(
        &self,
        compiler: *const IRCompiler,
        vertexShaderReflection: *const IRShaderReflection,
        layout: *const IRVersionedInputLayoutDescriptor,
        binary: *mut IRMetalLibBinary,
    ) -> bool {
        (self.IRMetalLibSynthesizeStageInFunction)(compiler, vertexShaderReflection, layout, binary)
    }
    pub unsafe fn IRObjectGetReflection(
        &self,
        obj: *const IRObject,
        stage: IRShaderStage,
        reflection: *mut IRShaderReflection,
    ) -> bool {
        (self.IRObjectGetReflection)(obj, stage, reflection)
    }
    pub unsafe fn IRCompilerSetGlobalRootSignature(
        &self,
        compiler: *mut IRCompiler,
        rootSignature: *const IRRootSignature,
    ) {
        (self.IRCompilerSetGlobalRootSignature)(compiler, rootSignature)
    }
    pub unsafe fn IRCompilerSetCompatibilityFlags(
        &self,
        compiler: *mut IRCompiler,
        flags: IRCompatibilityFlags,
    ) {
        (self.IRCompilerSetCompatibilityFlags)(compiler, flags)
    }
    pub unsafe fn IRCompilerSetInputTopology(
        &self,
        compiler: *mut IRCompiler,
        inputTopology: IRInputTopology,
    ) {
        (self.IRCompilerSetInputTopology)(compiler, inputTopology)
    }
    pub unsafe fn IRCompilerEnableGeometryAndTessellationEmulation(
        &self,
        compiler: *mut IRCompiler,
        enable: bool,
    ) {
        (self.IRCompilerEnableGeometryAndTessellationEmulation)(compiler, enable)
    }
    pub unsafe fn IRCompilerSetDualSourceBlendingConfiguration(
        &self,
        compiler: *mut IRCompiler,
        configuration: IRDualSourceBlendingConfiguration,
    ) {
        (self.IRCompilerSetDualSourceBlendingConfiguration)(compiler, configuration)
    }
    pub unsafe fn IRCompilerSetDepthFeedbackConfiguration(
        &self,
        compiler: *mut IRCompiler,
        configuration: IRDepthFeedbackConfiguration,
    ) {
        (self.IRCompilerSetDepthFeedbackConfiguration)(compiler, configuration)
    }
    pub unsafe fn IRMetalLibSynthesizeIntersectionWrapperFunction(
        &self,
        compiler: *const IRCompiler,
        binary: *mut IRMetalLibBinary,
    ) -> bool {
        (self.IRMetalLibSynthesizeIntersectionWrapperFunction)(compiler, binary)
    }
    pub unsafe fn IRCompilerSetEntryPointName(
        &self,
        compiler: *mut IRCompiler,
        newName: *const ::std::os::raw::c_char,
    ) {
        (self.IRCompilerSetEntryPointName)(compiler, newName)
    }
    pub unsafe fn IRCompilerSetMinimumGPUFamily(
        &self,
        compiler: *mut IRCompiler,
        family: IRGPUFamily,
    ) {
        (self.IRCompilerSetMinimumGPUFamily)(compiler, family)
    }
    pub unsafe fn IRCompilerSetMinimumDeploymentTarget(
        &self,
        compiler: *mut IRCompiler,
        operatingSystem: IROperatingSystem,
        version: *const ::std::os::raw::c_char,
    ) {
        (self.IRCompilerSetMinimumDeploymentTarget)(compiler, operatingSystem, version)
    }
    pub unsafe fn IRMetalLibBinaryCreate(&self) -> *mut IRMetalLibBinary {
        (self.IRMetalLibBinaryCreate)()
    }
    pub unsafe fn IRMetalLibBinaryDestroy(&self, lib: *mut IRMetalLibBinary) {
        (self.IRMetalLibBinaryDestroy)(lib)
    }
    pub unsafe fn IRMetalLibGetBytecode(
        &self,
        lib: *const IRMetalLibBinary,
        outBytecode: *mut u8,
    ) -> usize {
        (self.IRMetalLibGetBytecode)(lib, outBytecode)
    }
    pub unsafe fn IRMetalLibGetBytecodeSize(&self, lib: *const IRMetalLibBinary) -> usize {
        (self.IRMetalLibGetBytecodeSize)(lib)
    }
    pub unsafe fn IRObjectSerialize(
        &self,
        outputPath: *const ::std::os::raw::c_char,
        obj: *const IRObject,
        stage: IRShaderStage,
    ) -> bool {
        (self.IRObjectSerialize)(outputPath, obj, stage)
    }
    pub unsafe fn IRShaderReflectionCreate(&self) -> *mut IRShaderReflection {
        (self.IRShaderReflectionCreate)()
    }
    pub unsafe fn IRShaderReflectionDestroy(&self, reflection: *mut IRShaderReflection) {
        (self.IRShaderReflectionDestroy)(reflection)
    }
    pub unsafe fn IRShaderReflectionGetEntryPointFunctionName(
        &self,
        reflection: *const IRShaderReflection,
    ) -> *const ::std::os::raw::c_char {
        (self.IRShaderReflectionGetEntryPointFunctionName)(reflection)
    }
    pub unsafe fn IRShaderReflectionNeedsFunctionConstants(
        &self,
        reflection: *const IRShaderReflection,
    ) -> bool {
        (self.IRShaderReflectionNeedsFunctionConstants)(reflection)
    }
    pub unsafe fn IRShaderReflectionGetFunctionConstantCount(
        &self,
        reflection: *const IRShaderReflection,
    ) -> usize {
        (self.IRShaderReflectionGetFunctionConstantCount)(reflection)
    }
    pub unsafe fn IRShaderReflectionCopyFunctionConstants(
        &self,
        reflection: *const IRShaderReflection,
        functionConstants: *mut IRFunctionConstant,
    ) {
        (self.IRShaderReflectionCopyFunctionConstants)(reflection, functionConstants)
    }
    pub unsafe fn IRShaderReflectionReleaseFunctionConstants(
        &self,
        functionConstants: *mut IRFunctionConstant,
        functionConstantCount: usize,
    ) {
        (self.IRShaderReflectionReleaseFunctionConstants)(functionConstants, functionConstantCount)
    }
    pub unsafe fn IRShaderReflectionCopyComputeInfo(
        &self,
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        csinfo: *mut IRVersionedCSInfo,
    ) -> bool {
        (self.IRShaderReflectionCopyComputeInfo)(reflection, version, csinfo)
    }
    pub unsafe fn IRShaderReflectionCopyVertexInfo(
        &self,
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        vsinfo: *mut IRVersionedVSInfo,
    ) -> bool {
        (self.IRShaderReflectionCopyVertexInfo)(reflection, version, vsinfo)
    }
    pub unsafe fn IRShaderReflectionCopyFragmentInfo(
        &self,
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        fsinfo: *mut IRVersionedFSInfo,
    ) -> bool {
        (self.IRShaderReflectionCopyFragmentInfo)(reflection, version, fsinfo)
    }
    pub unsafe fn IRShaderReflectionCopyGeometryInfo(
        &self,
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        gsinfo: *mut IRVersionedGSInfo,
    ) -> bool {
        (self.IRShaderReflectionCopyGeometryInfo)(reflection, version, gsinfo)
    }
    pub unsafe fn IRShaderReflectionCopyHullInfo(
        &self,
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        hsinfo: *mut IRVersionedHSInfo,
    ) -> bool {
        (self.IRShaderReflectionCopyHullInfo)(reflection, version, hsinfo)
    }
    pub unsafe fn IRShaderReflectionCopyDomainInfo(
        &self,
        reflection: *const IRShaderReflection,
        version: IRReflectionVersion,
        dsinfo: *mut IRVersionedDSInfo,
    ) -> bool {
        (self.IRShaderReflectionCopyDomainInfo)(reflection, version, dsinfo)
    }
    pub unsafe fn IRShaderReflectionReleaseComputeInfo(
        &self,
        csinfo: *mut IRVersionedCSInfo,
    ) -> bool {
        (self.IRShaderReflectionReleaseComputeInfo)(csinfo)
    }
    pub unsafe fn IRShaderReflectionReleaseVertexInfo(
        &self,
        vsinfo: *mut IRVersionedVSInfo,
    ) -> bool {
        (self.IRShaderReflectionReleaseVertexInfo)(vsinfo)
    }
    pub unsafe fn IRShaderReflectionReleaseFragmentInfo(
        &self,
        fsinfo: *mut IRVersionedFSInfo,
    ) -> bool {
        (self.IRShaderReflectionReleaseFragmentInfo)(fsinfo)
    }
    pub unsafe fn IRShaderReflectionReleaseGeometryInfo(
        &self,
        gsinfo: *mut IRVersionedGSInfo,
    ) -> bool {
        (self.IRShaderReflectionReleaseGeometryInfo)(gsinfo)
    }
    pub unsafe fn IRShaderReflectionReleaseHullInfo(&self, hsinfo: *mut IRVersionedHSInfo) -> bool {
        (self.IRShaderReflectionReleaseHullInfo)(hsinfo)
    }
    pub unsafe fn IRShaderReflectionReleaseDomainInfo(
        &self,
        dsinfo: *mut IRVersionedDSInfo,
    ) -> bool {
        (self.IRShaderReflectionReleaseDomainInfo)(dsinfo)
    }
    pub unsafe fn IRShaderReflectionGetResourceCount(
        &self,
        reflection: *const IRShaderReflection,
    ) -> usize {
        (self.IRShaderReflectionGetResourceCount)(reflection)
    }
    pub unsafe fn IRShaderReflectionGetResourceLocations(
        &self,
        reflection: *const IRShaderReflection,
        resourceLocations: *mut IRResourceLocation,
    ) {
        (self.IRShaderReflectionGetResourceLocations)(reflection, resourceLocations)
    }
    pub unsafe fn IRRootSignatureGetResourceCount(
        &self,
        rootSignature: *const IRRootSignature,
    ) -> usize {
        (self.IRRootSignatureGetResourceCount)(rootSignature)
    }
    pub unsafe fn IRRootSignatureGetResourceLocations(
        &self,
        rootSignature: *const IRRootSignature,
        resourceLocations: *mut IRResourceLocation,
    ) {
        (self.IRRootSignatureGetResourceLocations)(rootSignature, resourceLocations)
    }
    pub unsafe fn IRShaderReflectionSerialize(
        &self,
        reflection: *mut IRShaderReflection,
    ) -> *const ::std::os::raw::c_char {
        (self.IRShaderReflectionSerialize)(reflection)
    }
    pub unsafe fn IRShaderReflectionDeserialize(
        &self,
        blob: *const ::std::os::raw::c_char,
        reflection: *mut IRShaderReflection,
    ) {
        (self.IRShaderReflectionDeserialize)(blob, reflection)
    }
}
